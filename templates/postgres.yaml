---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    {{- include "miniflux.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: postgres
  strategy:
    type: "{{ .Values.postgres.strategy }}"
  template:
    metadata:
      labels:
        {{- include "miniflux.labels" . | nindent 8 }}
        app.kubernetes.io/component: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: "{{ .Values.postgres.image.pullPolicy }}"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.postgres.user }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgres.password }}"
            - name: POSTGRES_DB
              value: "{{ .Values.postgres.database }}"
          resources:
            limits:
              memory: "{{ .Values.postgres.resources.limits.memory }}"
              cpu: "{{ .Values.postgres.resources.limits.cpu }}"
            requests:
              memory: "{{ .Values.postgres.resources.requests.memory }}"
              cpu: "{{ .Values.postgres.resources.requests.cpu }}"
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: data
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "{{ .Values.postgres.user }}"
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: data
          {{- if .Values.postgres.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.postgres.persistence.claimName | default (printf "%s-postgres-pvc" .Release.Name) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      restartPolicy: Always

---
{{- if .Values.postgres.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.postgres.persistence.claimName | default (printf "%s-postgres-pvc" .Release.Name) }}
  labels:
    {{- include "miniflux.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ .Values.postgres.persistence.size }}"
  {{- if .Values.postgres.persistence.storageClass }}
  storageClassName: "{{ .Values.postgres.persistence.storageClass }}"
  {{- end }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    {{- include "miniflux.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/component: "postgres"
    app.kubernetes.io/name: "{{ template "miniflux.name" . }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
